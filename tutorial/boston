{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMWt0QH/4M5y/SRTlrai83z"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"rNEzWLR1x-y2","executionInfo":{"status":"error","timestamp":1690871309548,"user_tz":-540,"elapsed":14353,"user":{"displayName":"김통일(이과대학 물리학)","userId":"05565847826958534561"}},"outputId":"c03b9130-af94-421d-cc28-708a6b984dc6"},"outputs":[{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-c3b1f9752e10>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDataLoader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mload_boston\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/datasets/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    154\u001b[0m             \"\"\"\n\u001b[1;32m    155\u001b[0m         )\n\u001b[0;32m--> 156\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mImportError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    157\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: \n`load_boston` has been removed from scikit-learn since version 1.2.\n\nThe Boston housing prices dataset has an ethical problem: as\ninvestigated in [1], the authors of this dataset engineered a\nnon-invertible variable \"B\" assuming that racial self-segregation had a\npositive impact on house prices [2]. Furthermore the goal of the\nresearch that led to the creation of this dataset was to study the\nimpact of air quality but it did not give adequate demonstration of the\nvalidity of this assumption.\n\nThe scikit-learn maintainers therefore strongly discourage the use of\nthis dataset unless the purpose of the code is to study and educate\nabout ethical issues in data science and machine learning.\n\nIn this special case, you can fetch the dataset from the original\nsource::\n\n    import pandas as pd\n    import numpy as np\n\n    data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n    raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n    data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n    target = raw_df.values[1::2, 2]\n\nAlternative datasets include the California housing dataset and the\nAmes housing dataset. You can load the datasets as follows::\n\n    from sklearn.datasets import fetch_california_housing\n    housing = fetch_california_housing()\n\nfor the California housing dataset and::\n\n    from sklearn.datasets import fetch_openml\n    housing = fetch_openml(name=\"house_prices\", as_frame=True)\n\nfor the Ames housing dataset.\n\n[1] M Carlisle.\n\"Racist data destruction?\"\n<https://medium.com/@docintangible/racist-data-destruction-113e3eff54a8>\n\n[2] Harrison Jr, David, and Daniel L. Rubinfeld.\n\"Hedonic housing prices and the demand for clean air.\"\nJournal of environmental economics and management 5.1 (1978): 81-102.\n<https://www.researchgate.net/publication/4974606_Hedonic_housing_prices_and_the_demand_for_clean_air>\n","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["# https://github.com/christianversloot/machine-learning-articles/blob/main/how-to-create-a-neural-network-for-regression-with-pytorch.md\n","import torch\n","from torch import nn\n","from torch.utils.data import DataLoader\n","from sklearn.datasets import load_boston\n","from sklearn.preprocessing import StandardScaler\n","\n","class BostonDataset(torch.utils.data.Dataset):\n","  '''\n","  Prepare the Boston dataset for regression\n","  '''\n","\n","  def __init__(self, X, y, scale_data=True):\n","    if not torch.is_tensor(X) and not torch.is_tensor(y):\n","      # Apply scaling if necessary\n","      if scale_data:\n","          X = StandardScaler().fit_transform(X)\n","      self.X = torch.from_numpy(X)\n","      self.y = torch.from_numpy(y)\n","\n","  def __len__(self):\n","      return len(self.X)\n","\n","  def __getitem__(self, i):\n","      return self.X[i], self.y[i]\n","\n","\n","class MLP(nn.Module):\n","  '''\n","    Multilayer Perceptron for regression.\n","  '''\n","  def __init__(self):\n","    super().__init__()\n","    self.layers = nn.Sequential(\n","      nn.Linear(13, 64),\n","      nn.ReLU(),\n","      nn.Linear(64, 32),\n","      nn.ReLU(),\n","      nn.Linear(32, 1)\n","    )\n","\n","\n","  def forward(self, x):\n","    '''\n","      Forward pass\n","    '''\n","    return self.layers(x)\n","\n","\n","if __name__ == '__main__':\n","\n","  # Set fixed random number seed\n","  torch.manual_seed(42)\n","\n","  # Load Boston dataset\n","  X, y = load_boston(return_X_y=True)\n","\n","  # Prepare Boston dataset\n","  dataset = BostonDataset(X, y)\n","  trainloader = torch.utils.data.DataLoader(dataset, batch_size=10, shuffle=True, num_workers=1)\n","\n","  # Initialize the MLP\n","  mlp = MLP()\n","\n","  # Define the loss function and optimizer\n","  loss_function = nn.L1Loss()\n","  optimizer = torch.optim.Adam(mlp.parameters(), lr=1e-4)\n","\n","  # Run the training loop\n","  for epoch in range(0, 5): # 5 epochs at maximum\n","\n","    # Print epoch\n","    print(f'Starting epoch {epoch+1}')\n","\n","    # Set current loss value\n","    current_loss = 0.0\n","\n","    # Iterate over the DataLoader for training data\n","    for i, data in enumerate(trainloader, 0):\n","\n","      # Get and prepare inputs\n","      inputs, targets = data\n","      inputs, targets = inputs.float(), targets.float()\n","      targets = targets.reshape((targets.shape[0], 1))\n","\n","      # Zero the gradients\n","      optimizer.zero_grad()\n","\n","      # Perform forward pass\n","      outputs = mlp(inputs)\n","\n","      # Compute loss\n","      loss = loss_function(outputs, targets)\n","\n","      # Perform backward pass\n","      loss.backward()\n","\n","      # Perform optimization\n","      optimizer.step()\n","\n","      # Print statistics\n","      current_loss += loss.item()\n","      if i % 10 == 0:\n","          print('Loss after mini-batch %5d: %.3f' %\n","                (i + 1, current_loss / 500))\n","          current_loss = 0.0\n","\n","  # Process is complete.\n","  print('Training process has finished.')"]},{"cell_type":"code","source":[],"metadata":{"id":"iLW6fC-oyFNp"},"execution_count":null,"outputs":[]}]}